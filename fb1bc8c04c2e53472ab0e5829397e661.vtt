WEBVTT

00:03.000 --> 00:08.000
Identity Box. Let me start with this:

00:08.000 --> 00:13.000
Privacy starts with identity.

00:13.000 --> 00:19.000
But not really just "identity".
Actually, privacy starts with self-sovereign identity.

00:19.000 --> 00:22.000
People here most probably know what self-sovereign identity is.

00:22.000 --> 00:26.000
Shortly speaking, it is an identity that you own and control.

00:27.000 --> 00:30.000
It also means that it is not owned by some service like Google or GitHub, etc.

00:30.000 --> 00:33.000
and it also means that nobody can take it away from you.

00:36.000 --> 00:41.000
Self-sovereign identity needs a decentralized network.
[and this slide will be repeated a couple of times today]

00:41.000 --> 00:44.000
It is not obvious per se, but it becomes easier to realize

00:45.000 --> 00:49.000
if we consider how a self-sovereign identity can be implemented.

00:50.000 --> 00:55.000
The most trivial and - in some way - naive way of implementing self-sovereign identity

00:55.000 --> 01:00.000
is to associate it with a public key.

01:00.000 --> 01:05.000
So, basically, every identity is a public key.

01:05.000 --> 01:08.000
And so we did it.

01:08.000 --> 01:10.000
We implemented this approach in Cogito:

01:10.000 --> 01:17.000
an identity management framework that we created approximately 2 years ago,

01:17.000 --> 01:20.000
and which we presented last year here at FOSDEM in a lighting talk.

01:20.000 --> 01:28.000
And, as you may expect, using a public key as your identity,
immediately triggers some interesting questions:

01:28.000 --> 01:32.000
What if your public key gets compromised?

01:32.000 --> 01:35.000
Of course, your identity is gone.

01:35.000 --> 01:38.000
How the people who use your identity will know about it?

01:38.000 --> 01:41.000
Do you even know yourself who is using your identity?

01:41.000 --> 01:42.000
Sure not!

01:42.000 --> 01:47.000
In other words, you have to deal with a network of keys,
like in a web of trust.

01:47.000 --> 01:50.000
Something that we know is a hard problem on its own.

01:54.000 --> 01:58.000
Now, the members of the "Rebooting web of trust" initiative,
together with other people,

01:58.000 --> 02:03.000
came up with a Decentralized Identifiers (DIDs) proposal.

02:11.000 --> 02:20.000
They introduced a DID resolver. What does it do?

02:20.000 --> 02:25.000
Given your identity, which is just a string of characters in the end,

02:25.000 --> 02:31.000
you ask the resolver: "give me a so called Decentralized Identifier Document (DID Doc)".

02:31.000 --> 02:35.000
In this DID document, you find information about given identity,

02:35.000 --> 02:38.000
e.g. your public encryption or your public signing key.

02:39.000 --> 02:41.000
Quite powerful concept, isn't it?

02:41.000 --> 02:44.000
On a higher abstraction level, it should work pretty well,

02:44.000 --> 02:50.000
and, it seems to solve most of the problems mentioned earlier.

02:51.000 --> 02:53.000
You can change your keys at any moment.

02:53.000 --> 02:56.000
Your identity stays the same.

02:57.000 --> 03:00.000
People do not need to know your public keys.

03:00.000 --> 03:04.000
You do not have to keep public keys of any peers that you want to communicate with. 

03:04.000 --> 03:08.000
You just ask the resolver, and the resolver tells you:

03:08.000 --> 03:12.000
"give me an identity and I will provide you with the keys".

03:12.000 --> 03:15.000
Looks like key distribution problem is solved!

03:15.000 --> 03:20.000
In other words, instead of having a network of keys forming a typical web of trust,

03:20.000 --> 03:23.000
you end up in the situation like one on the picture:

03:23.000 --> 03:28.000
you ask some sort of an infrastructure to provide the requested information to you.

03:28.000 --> 03:33.000
But now, looking at the picture presented, it reminds of a centralized architecture.

03:33.000 --> 03:37.000
Well, actually, the resolver could be implemented in a purely centralized way.

03:37.000 --> 03:41.000
And we did it! As an exercise and it works great!

03:41.000 --> 03:46.000
It has extremely low latencies and it is reliable, however...

03:46.000 --> 03:51.000
if you base the resolution of identities

03:51.000 --> 03:53.000
solely on a centralized service,

03:53.000 --> 03:56.000
we won't be speaking about self-sovereign identity any more!

03:56.000 --> 04:03.000
This means that the resolver itself, needs to be built on a decentralized network as well.

04:03.000 --> 04:09.000
This is why I was saying at the beginning of this talk that self-sovereign identity needs a decentralized network.

04:09.000 --> 04:13.000
And now, what is the problem with decentralized networks?

04:13.000 --> 04:23.000
Why even today, after so many attempts, we do not have a mainstream, reliable, stable P2P infrastructure out there?

04:23.000 --> 04:28.000
One of the reasons is that there are no physical nodes.

04:28.000 --> 04:32.000
It is not enough to put 1000 nodes in a cloud like Amazon,

04:32.000 --> 04:40.000
and is also not sufficient that network enthusiasts run their nodes on a laptop for a couple of hours a week.

04:40.000 --> 04:46.000
That's not how it works. Even IPFS promotes the nodes that are stable and stay on.

04:46.000 --> 04:54.000
This is why decentralized networks need physical nodes that are available, stable, and - possibly - always on.

04:54.000 --> 04:57.000
I brought with me one such a physical node.

04:57.000 --> 05:01.000
Identity Box is a physical node, a physical device.

05:01.000 --> 05:03.000
Well, this one here is just an empty case, it is empty inside.

05:03.000 --> 05:08.000
Because my real Identity Box runs at a very moment on my desk.

05:08.000 --> 05:11.000
It is connected to other Identity Boxes.

05:11.000 --> 05:13.000
So, how would it actually work?

05:13.000 --> 05:19.000
We want Identity Boxes to go to people's homes like other physical devices.

05:19.000 --> 05:24.000
Once you get your own Identity Box, you also get an Identity App from us.

05:24.000 --> 05:28.000
Now, let me switch to a demo, so that you can also experience how it works.

05:28.000 --> 05:38.000
Here, you see my Identity App: an application from which I can manage all my identities.

05:38.000 --> 05:44.000
Now, I scan the QRCode from my Identity Box.

05:44.000 --> 05:50.000
My Identity App connects to my Identity Box - the one that you saw running on my desk.

05:50.000 --> 05:53.000
It detects that there are some backups on it, but I will not use backups to restore my identities for now.

05:53.000 --> 05:58.000
Instead, I will quickly create a new identity.

06:02.000 --> 06:08.000
Now, you can see in my address book that I have one "own" identity.

06:08.000 --> 06:12.000
Identity App allows you to create multiple identities.

06:12.000 --> 06:22.000
Since I am here at FOSDEM, I will create identity "Marcin@FOSDEM20".

06:26.000 --> 06:29.000
Now, in my address book you can see that I have two "own" identities.

06:29.000 --> 06:35.000
I can easily switch between them: I can choose to be "Marcin" or to be "Marcin@FOSDEM20".

06:35.000 --> 06:39.000
Of course now, I would like to be able to communicate with someone else.

06:39.000 --> 06:43.000
My colleague Mark is here with me, so let me connect with him.

06:43.000 --> 06:46.000
He has his own Identity Box associated with his Identity App.

06:46.000 --> 06:49.000
Using his Identity App, he shows me now a QR Code corresponding to his identity.

06:49.000 --> 06:57.000
I will scan this QR Code with my Identity App.

06:57.000 --> 07:00.000
And I will give it a name "Mark".

07:03.000 --> 07:07.000
Now, in my address book, you can also see I have one "peer" identity.

07:10.000 --> 07:14.000
We provide a simple secret-sharing service, which we can use to demonstrate the use
of the identities we've just created.

07:14.000 --> 07:21.000
It asks me to connect by scanning the presented QR Code.

07:22.000 --> 07:26.000
Now, I select the identity I want to send my secret to.

07:26.000 --> 07:28.000
I select "Mark".

07:28.000 --> 07:35.000
I type my secret message in and I click on "Send".

07:35.000 --> 07:41.000
The secret sharing app resolves my identity using its own Identity Box.

07:41.000 --> 07:43.000
It then creates a link which can be shared with Mark.

07:43.000 --> 07:50.000
We can use any communication channel we like: only Mark will be able to decrypt the secret.

07:50.000 --> 07:52.000
Mark, will open the link in his browser

07:52.000 --> 07:58.000
and use his Identity App to decrypt the secret.

07:58.000 --> 08:02.000
He will first connect to the secret sharing app by scanning a QR Code.

08:02.000 --> 08:05.000
The secret will be decrypted using the Mark private key and presented to Mark.

08:05.000 --> 08:09.000
So, this is Identity Box! Thank you!